# -*- coding: utf-8 -*-
"""quiz amazon.csv

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1K5wdvjd8sDJVbXV1y_4Rtx0jl-FqkJPQ
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from textblob import TextBlob
from wordcloud import WordCloud
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.preprocessing import LabelEncoder

# Load dataset
file_path = "/content/amazon_review.csv"  # Update with correct file path
df = pd.read_csv(file_path, encoding='ISO-8859-1')

# Convert date column to datetime format
df['reviewTime'] = pd.to_datetime(df['reviewTime'], errors='coerce')

# Sentiment Analysis using TextBlob
df['polarity'] = df['reviewText'].astype(str).apply(lambda x: TextBlob(x).sentiment.polarity)
df['sentiment'] = df['polarity'].apply(lambda x: 'Positive' if x > 0 else ('Negative' if x < 0 else 'Neutral'))

# Plot Sentiment Distribution
plt.figure(figsize=(8, 5))
sns.countplot(x=df['sentiment'], palette="coolwarm")
plt.title("Sentiment Distribution of Reviews")
plt.xlabel("Sentiment")
plt.ylabel("Count")
plt.show()

# WordCloud of Most Frequent Words in Positive Reviews
positive_reviews = " ".join(df[df['sentiment'] == 'Positive']['reviewText'].dropna())
wordcloud = WordCloud(width=800, height=400, background_color='white').generate(positive_reviews)

plt.figure(figsize=(10, 5))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis("off")
plt.title("WordCloud of Most Common Words in Positive Reviews")
plt.show()

# Most Important Factor Analysis: Correlation Heatmap
correlation_matrix = df[['overall', 'helpful_yes', 'total_vote', 'day_diff']].corr()
plt.figure(figsize=(8, 5))
sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm", linewidths=0.5)
plt.title("Correlation Matrix of Review Factors")
plt.show()

# TF-IDF Analysis for Most Important Words
tfidf = TfidfVectorizer(stop_words='english', max_features=20)
tfidf_matrix = tfidf.fit_transform(df['reviewText'].astype(str))
feature_names = tfidf.get_feature_names_out()
word_scores = np.asarray(tfidf_matrix.mean(axis=0)).flatten()

# Display top 10 words based on TF-IDF score
important_words = pd.DataFrame({'Word': feature_names, 'Score': word_scores})
important_words = important_words.sort_values(by='Score', ascending=False).head(10)
print("Top 10 Most Important Words in Reviews:")
print(important_words)

